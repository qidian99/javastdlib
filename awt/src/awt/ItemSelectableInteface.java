package awt;

import java.awt.Frame;
import java.awt.ItemSelectable;
import java.awt.List;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

public class ItemSelectableInteface {
  public static void main(String[] args) {
    Frame frame = new Frame("ItemSelectableExample");
    // this list will have 2 visible rows
    /*
    Creates a new scrolling list initialized with the specified number of visible lines. 
    By default, multiple selections are not allowed. Note that this is a convenience method 
    for List(rows, false). Also note that the number of visible rows in the list cannot 
    be changed after it has been created.
    */
    final List list = new List(3);
    list.add("Java");
    list.add("Jsp");
    list.add("Servlet");
    frame.add(list);
    frame.setSize(400, 400);
    frame.setVisible(true);
    /*
    An abstract adapter class for receiving window events. The methods in this class are empty. 
    This class exists as convenience for creating listener objects.

    Extend this class to create a WindowEvent listener and override the methods for the events 
    of interest. (If you implement the WindowListener interface, you have to define all of the 
    methods in it. This abstract class defines null methods for them all, so you can only have 
    to define methods for events you care about.)

    Create a listener object using the extended class and then register it with a Window using 
    the window's addWindowListener method. When the window's status changes by virtue of being 
    opened, closed, activated or deactivated, iconified or deiconified, the relevant method in 
    the listener object is invoked, and the WindowEvent is passed to it.
    */
    frame.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        System.exit(0);
      }
    });
    
    /*
    A semantic event which indicates that an item was selected or deselected. This high-level 
    event is generated by an ItemSelectable object (such as a List) when an item is selected 
    or deselected by the user. The event is passed to every ItemListener object which registered 
    to receive such events using the component's addItemListener method.

		The object that implements the ItemListener interface gets this ItemEvent when the event occurs.
		The listener is spared the details of processing individual mouse movements and mouse clicks, 
		and can instead process a "meaningful" (semantic) event like "item selected" or "item deselected".
     */
    list.addItemListener(new ItemListener() {
      @Override
      public void itemStateChanged(ItemEvent ie) {
      		/*
      		 * return the ItemSelectable object that originated the event.
      		 */
        ItemSelectable itemselectable = ie.getItemSelectable();
        //to get the selected item, we can store it to an instance variable
        System.out.println("Selected: " + selectedItem(itemselectable));
      }
    });
  }

  static private String selectedItem(ItemSelectable itemselectable) {
    Object selected[] = itemselectable.getSelectedObjects();
    return ((selected.length == 0) ? "null" : (String) selected[0]);
  }
}